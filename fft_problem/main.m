close all; clear all; clc;

Nsub = 16;
fs_tx = 1e9;
fs_scope = 5e9;

%% 
%read in time-domain signal recorded from scope when a pulse of all zeros
%was sent (5GS/s) (matrix of size 100x1001 since 100 sets of samples were
%collected)
channel_response_in_time = load('data\i_data_all_zeros_2.txt');

%% find FP for time domain OFDM pulse generated by us

%read in time-domain TX signal (1GS/s)
tx_signal = load('data\tx_signal_42.txt', 'r');
%normalize
tx_signal = tx_signal ./ max(abs(tx_signal));
%make zero mean
tx_signal = tx_signal - mean(tx_signal);
%find FP
tx_profile = fft(tx_signal(1:end-1));
%normalize and grab only positive frequencies, these values match up exactly
%with what was originally specified when the OFDM pulse was created
tx_profile(1) = 0;
tx_profile = tx_profile ./ max(abs(tx_profile));
tx_profile = abs(tx_profile);
tx_profile = tx_profile(2:17);

%% find FP for resampled time domain OFDM pulse

timescale = fs_scope/fs_tx;         % Resample multiplier
txlen = 2*Nsub + 1;                 % Number of actual samples in transmit waveform
%resample TX to 5GS/s
refdat = tx_signal(1:txlen);
refdat = resample(refdat, timescale, 1);
%remove DC offset
refdat = refdat - mean(refdat);
%make 5001 samples long
filler = zeros(1,5001-length(refdat));
tx_signal_res = [refdat filler];
%find FP
tx_profile_res = downsamp_to_subcarriers(tx_signal_res, fs_scope, fs_tx, Nsub,0);
tx_profile_res = tx_profile_res ./ max(abs(tx_profile_res));

%% find FP of raw RX data

%read in data
rx_signal = load('data\i_data_signal_42.txt', 'r');
[num_data, ~] = size(rx_signal);
%for each of the 100 signals, cut off front of signal and extend the length
for ii = 1:num_data
    %cut off the first 100 samples since it's actually part of the pulse
    %used to sync the scope with
    temp_sig = rx_signal(ii,100:end);
    filler = zeros(1,5001-length(temp_sig));
    rx_filled(ii,:) = [temp_sig filler];
end
[fp, ~] = downsamp_to_subcarriers(rx_filled, fs_scope, fs_tx, Nsub, 0);
rx_profile = mean(fp,2);
rx_profile(1) = 0;                  %1st subcarrier is wacky
rx_profile = rx_profile ./ max(abs(rx_profile));

%% find FP of RX data when channel response is subtracted in time-domain
for ii = 1:num_data
   temp_sig = rx_signal(ii,:) - mean(channel_response_in_time);
   filler = zeros(1,5001-length(temp_sig));
   rx_filled_time(ii,:) = [temp_sig filler];
end
[fp, ~] = downsamp_to_subcarriers(rx_filled_time, fs_scope, fs_tx, Nsub, 0);
rx_profile_time = mean(fp,2);
% rx_profile_time(1) = 0;
rx_profile_time = rx_profile_time ./ max(abs(rx_profile_time));

%% find FP of RX data when channel response is "subtracted" in frequency-domain

%find transfer function of channel response
for ii = 1:size(channel_response_in_time,1)
   temp_sig = channel_response_in_time(ii,:) - mean(channel_response_in_time(ii,:));
   channel_fft(ii,:) = (fft(temp_sig));
end
%find the average of the "transfer function" of the channel response
channel_fft = mean(channel_fft);

%
temp_sig = mean(channel_response_in_time);
temp_sig = temp_sig - mean(temp_sig);
channel_fft = fft(temp_sig);
%

%find the transfer function of each rx data, divide by channel response
%transfer function, ifft back to time-domain
for ii = 1:num_data
    temp_sig = rx_signal(ii,:) - mean(rx_signal(ii,:));
    fft_rx_data = fft(temp_sig);
    
    fft_after_division = fft_rx_data ./ channel_fft;
    new_rx_signal_temp = ifft(fft_after_division);
    
    filler = zeros(1,5001-length(new_rx_signal_temp));
    new_rx_signal(ii,:) = [new_rx_signal_temp filler];
end
[fp, ~] = downsamp_to_subcarriers(new_rx_signal, fs_scope, fs_tx, Nsub, 0);
rx_profile_freq = mean(fp, 2);
% rx_profile_freq(1) = 0;
rx_profile_freq = rx_profile_freq ./ max(abs(rx_profile_freq));


%% plot FPs

%plot FP of signal
figure; hold on;
plot(tx_profile, '-bs', 'LineWidth', 2);
plot(tx_profile_res, '-rs', 'LineWidth', 2);
plot(rx_profile, '-cs', 'LineWidth', 2);
plot(rx_profile_time, '-ks', 'LineWidth', 2);
plot(rx_profile_freq, '-gs', 'LineWidth', 2);
xlabel('Subcarrier No.');
ylabel('Magnitude');
legend('Original TX', 'Resampled TX', 'Raw RX', 'Time Correction', 'Freq. Correction');
grid on;

%% some other plots that might be useful

%frequency-domain plots
N = 1001;
fn=linspace(-fs_scope*(N-1)/N/2,fs_scope*(N-1)/N/2,N);
% fft_rx_data = fft_rx_data ./ fs_scope;

figure; hold on;
plot(fn,20*log10(fftshift(abs(fft_rx_data)/max(abs(fft_rx_data)))),'r');
plot(fn,20*log10(fftshift(abs(channel_fft)/max(abs(channel_fft)))),'b');
plot(fn,20*log10(fftshift(abs(fft_after_division)/max(abs(fft_after_division)))),'g');
xlabel('Frequency (Hz)');
ylabel('Magnitude');
legend('Raw RX', 'Channel Response', 'After Filtering');
ylim([-60 0]);

%time domain plots
figure; hold on;

subplot(2,2,1);
plot(rx_signal(1,:), 'b', 'LineWidth', 2);
xlabel('Sample No.'); ylabel('Magnitude');
title('Raw RX signal'); xlim([0 1010]);
grid on;

subplot(2,2,2);
plot(mean(channel_response_in_time), 'b', 'LineWidth', 2);
xlabel('Sample No.'); ylabel('Magnitude');
title('Channel Response'); xlim([0 1010]);
grid on;

subplot(2,2,3);
plot(rx_signal(1,:)-mean(channel_response_in_time), 'b', 'LineWidth', 2);
xlabel('Sample No.'); ylabel('Magnitude');
title('Time Domain Modification'); xlim([0 1010]);
grid on;

subplot(2,2,4);
plot(new_rx_signal_temp, 'b', 'LineWidth', 2);
xlabel('Sample No.'); ylabel('Magnitude');
title('Freq. Domain Modification'); xlim([0 1010]);
grid on;

